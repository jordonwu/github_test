# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMX_RELEASE: "imx-6.6.52-2.2.0_custom"
  YOCTO_DIR: "${GITHUB_WORKSPACE}/imx-6.6.52-2.2.0_custom-build"
  MACHINE: "imx8mpevk"
  DISTRO: "fsl-imx-xwayland"
  IMAGES: "core-image-minimal"
  REMOTE: "https://github.com/jordonwu/nxp-imx_imx-manifest.git"
  BRANCH: "imx-linux-scarthgap"
  #MANIFEST: "${IMX_RELEASE}.xml"
  MANIFEST: "imx-6.6.52-2.2.0_custom.xml"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Fetch Host Info
      - name: Fetch Host Info
        run: |
          echo "Host Memory Info:"
          echo "`free -h`"
          echo "Host Disk Info:"
          echo "`df -h`"
          echo "Host CPU info:"
          echo "`cat /proc/cpuinfo`"
          #echo "check /opt content"
          #echo "`du -h /opt`"
      # Install yocto package
      - name: Install packages
        run: |
          sudo apt-get install -y  gawk wget git-core diffstat unzip texinfo \
            gcc-multilib build-essential chrpath socat file cpio python3 \
            python3-pip python3-pexpect xz-utils debianutils iputils-ping \
            libsdl1.2-dev xterm tar locales net-tools rsync sudo vim curl zstd \
            liblz4-tool libssl-dev bc lzop libgnutls28-dev efitools git-lfs
          #echo "pip install pylibfdt"
          #pip install pylibfdt
          # Install repo tool and add to $PATH
          mkdir $GITHUB_WORKSPACE/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > $GITHUB_WORKSPACE/bin/repo
          chmod a+x $GITHUB_WORKSPACE/bin/repo
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          echo "---GITHUB_PATH : $GITHUB_PATH"
      # Download source code & build
      - name: Download source code
        run: |
          # Download manifest repo and sync code
          #mkdir -p /opt/buildroot_sdk
          #cd /opt/buildroot_sdk
          #repo init -u ${{github.event.inputs.manifest-url}} -b ${{github.event.inputs.manifest-branches-tags}} -m ${{github.event.inputs.manifest-file}}

          #echo "--- repo init -u ${MANIFEST_URL} -b ${MANIFEST_BRANCHES_TAGS} -m ${MANIFEST_FILE} ---"
          #repo init -u ${MANIFEST_URL} -b ${MANIFEST_BRANCHES_TAGS} -m ${MANIFEST_FILE}
          #repo sync
          echo "IMX_RELEASE"
          mkdir -p ${YOCTO_DIR}
          cd ${YOCTO_DIR}

          #Init
          echo "===> repo init -u ${REMOTE} -b ${BRANCH} -m ${MANIFEST} <==="
          repo init \
               -u ${REMOTE} \
               -b ${BRANCH} \
               -m ${MANIFEST}
          repo sync -j`nproc`
          # source the yocto env
          EULA=1 MACHINE="${MACHINE}" DISTRO="${DISTRO}" source imx-setup-release.sh -b build_${DISTRO}
          # Build
          bitbake ${IMAGES}
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
